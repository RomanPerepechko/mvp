import { FutureToolsCrawler } from '../crawlers/futuretools.js';
import { ToolService } from '../services/tool.service.js';
import { logger } from '../utils/logger.js';
import type { CrawlOptions } from '../types/index.js';

export async function crawlCommand(options: CrawlOptions): Promise<void> {
  const startTime = Date.now();
  
  logger.info(`–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${options.source}`);

  try {
    // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    let crawler: FutureToolsCrawler;
    
    switch (options.source.toLowerCase()) {
      case 'futuretools':
        crawler = new FutureToolsCrawler();
        break;
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${options.source}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: futuretools`);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await crawler.initialize();

    try {
      // –ü–∞—Ä—Å–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      const parsedTools = await crawler.crawlTools();

      if (parsedTools.length === 0) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
        return;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      const toolsToSave = options.limit 
        ? parsedTools.slice(0, options.limit)
        : parsedTools;

      logger.info(`–°–ø–∞—Ä—Å–µ–Ω–æ ${parsedTools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤${options.limit ? `, –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${toolsToSave.length}` : ''}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ dry run)
      if (!options.dryRun) {
        const toolService = new ToolService();
        const result = await toolService.upsertTools(toolsToSave);

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const totalTime = Date.now() - startTime;
        
        logger.info('üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', {
          source: options.source,
          parsed: result.parsed,
          saved: result.saved,
          updated: result.updated,
          errors: result.errors.length,
          totalTime: `${totalTime}–º—Å`,
        });

        if (result.errors.length > 0) {
          logger.warn(`–í–æ–∑–Ω–∏–∫–ª–æ ${result.errors.length} –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:`);
          result.errors.forEach(error => logger.warn(`  - ${error}`));
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try {
          const stats = await toolService.getStats();
          logger.info('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', stats);
        } catch (error) {
          logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error);
        }
      } else {
        logger.info(`üîç Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${toolsToSave.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        const examples = toolsToSave.slice(0, 3);
        logger.info('–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
        examples.forEach((tool, index) => {
          logger.info(`  ${index + 1}. ${tool.name} (${tool.category}) - ${tool.pricing}`);
          logger.info(`     ${tool.description.substring(0, 100)}${tool.description.length > 100 ? '...' : ''}`);
          logger.info(`     ${tool.url}`);
        });
      }

    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      await crawler.close();
    }

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    throw error;
  }
} 