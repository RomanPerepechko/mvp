import { ToolService } from '../services/tool.service.js';
import { logger } from '../utils/logger.js';
import type { ParsedTool } from '../types/index.js';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
const demoTools: ParsedTool[] = [
  {
    name: 'ChatGPT',
    description: '–ú–æ—â–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á',
    url: 'https://chat.openai.com',
    tags: ['chatbot', 'text-generation', 'ai-assistant'],
    category: 'Writing',
    pricing: 'Freemium',
    source: 'demo',
  },
  {
    name: 'Midjourney',
    description: 'AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π',
    url: 'https://midjourney.com',
    tags: ['image-generation', 'art', 'creative'],
    category: 'Image',
    pricing: 'Paid',
    source: 'demo',
  },
  {
    name: 'Notion AI',
    description: 'AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã',
    url: 'https://notion.so',
    tags: ['productivity', 'notes', 'planning'],
    category: 'Productivity',
    pricing: 'Freemium',
    source: 'demo',
  },
  {
    name: 'Copy.ai',
    description: 'AI-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–æ–≤',
    url: 'https://copy.ai',
    tags: ['copywriting', 'marketing', 'content'],
    category: 'Writing',
    pricing: 'Freemium',
    source: 'demo',
  },
  {
    name: 'Synthesia',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ AI-–≤–∏–¥–µ–æ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–µ–¥—É—â–∏–º–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
    url: 'https://synthesia.io',
    tags: ['video-generation', 'avatar', 'presentation'],
    category: 'Video',
    pricing: 'Paid',
    source: 'demo',
  },
];

export async function demoCommand(options: { dryRun?: boolean }): Promise<void> {
  const startTime = Date.now();
  
  logger.info('üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏');
  
  try {
    logger.info(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${demoTools.length} –¥–µ–º–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º—ã`);
    
    if (!options.dryRun) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const toolService = new ToolService();
      const result = await toolService.upsertTools(demoTools);
      
      const totalTime = Date.now() - startTime;
      
      logger.info('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', {
        source: 'demo',
        parsed: result.parsed,
        saved: result.saved,
        updated: result.updated,
        errors: result.errors.length,
        totalTime: `${totalTime}–º—Å`,
      });
      
      if (result.errors.length > 0) {
        logger.warn(`–í–æ–∑–Ω–∏–∫–ª–æ ${result.errors.length} –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:`);
        result.errors.forEach(error => logger.warn(`  - ${error}`));
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      try {
        const stats = await toolService.getStats();
        logger.info('üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', stats);
      } catch (error) {
        logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error);
      }
      
    } else {
      logger.info(`üîç Dry run –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${demoTools.length} –¥–µ–º–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      logger.info('–ü—Ä–∏–º–µ—Ä—ã –¥–µ–º–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
      demoTools.forEach((tool, index) => {
        logger.info(`  ${index + 1}. ${tool.name} (${tool.category}) - ${tool.pricing}`);
        logger.info(`     ${tool.description}`);
        logger.info(`     ${tool.url}`);
        logger.info(`     –¢–µ–≥–∏: ${tool.tags.join(', ')}`);
      });
    }
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
} 