#!/usr/bin/env node

import { Command } from 'commander';
import { config } from 'dotenv';
import { crawlCommand } from './commands/crawl.js';
import { demoCommand } from './commands/demo.js';
import { ToolService } from './services/tool.service.js';
import { logger } from './utils/logger.js';
import type { CrawlOptions } from './types/index.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const program = new Command();

program
  .name('parser')
  .description('CLI –ø–∞—Ä—Å–µ—Ä AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
  .version('1.0.0');

// –ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
program
  .command('crawl')
  .description('–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞')
  .argument('<source>', '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (futuretools)')
  .option('-l, --limit <number>', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤', parseInt)
  .option('-d, --dry-run', '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  .option('--log-level <level>', '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, warn, error)', 'info')
  .action(async (source: string, options: Omit<CrawlOptions, 'source'>) => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      if (options.logLevel) {
        logger.level = options.logLevel;
      }

      const crawlOptions: CrawlOptions = {
        source,
        ...options,
      };

      await crawlCommand(crawlOptions);
    } catch (error) {
      logger.error('–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    }
  });

// –î–µ–º–æ-–∫–æ–º–∞–Ω–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
program
  .command('demo')
  .description('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏')
  .option('-d, --dry-run', '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
  .action(async (options: { dryRun?: boolean }) => {
    try {
      await demoCommand(options);
    } catch (error) {
      logger.error('–î–µ–º–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
program
  .command('stats')
  .description('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
  .action(async () => {
    try {
      const toolService = new ToolService();
      const stats = await toolService.getStats();
      
      logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      logger.info(`–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${stats.total}`);
      
      if (Object.keys(stats.byCategory).length > 0) {
        logger.info('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        Object.entries(stats.byCategory).forEach(([category, count]) => {
          logger.info(`  ${category}: ${count}`);
        });
      }
      
      if (Object.keys(stats.byPricing).length > 0) {
        logger.info('–ü–æ —Ü–µ–Ω–æ–≤—ã–º –º–æ–¥–µ–ª—è–º:');
        Object.entries(stats.byPricing).forEach(([pricing, count]) => {
          logger.info(`  ${pricing}: ${count}`);
        });
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      process.exit(1);
    }
  });

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
program
  .command('clear')
  .description('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
  .option('-y, --yes', '–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
  .action(async (options: { yes?: boolean }) => {
    try {
      if (!options.yes) {
        logger.warn('‚ö†Ô∏è  –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –í–°–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
        logger.warn('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --yes');
        return;
      }

      const toolService = new ToolService();
      const deleted = await toolService.clearAll();
      
      logger.info(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleted} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      process.exit(1);
    }
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error: Error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
program.parse(); 